1.Spring的优点
1.1 IOC控制反转。将对象的创建，配置，生命周期交由Spring容器管理，实现了对象间的松耦合。
1.2 DI依赖注入。将容器的依赖关系交由Spring容器来管理。
1.3 AOP面向切面编程。业务解耦。
1.4 事务管理。通过简单的注解可以实现事务管理。
1.5 集成性。集成了mybatis等插件。

1.SpringBoot的优点
1.自动配置。根据类路径的依赖会自动配置依赖的Bean。
2.起步依赖，springboot-starter-web 引入基本的依赖。
3.静态文件 约定大于配置。src/main/resources/static
4.内嵌容器。tomcat。

2.Spring用到了哪些设计模式？（10）
1.单例模式。bean默认是单例的，一个类只有一个实例。
2.简单工厂。BeanFactory，getBean(name)获取bean实例。
3.工厂方法。例如FactoryBean的getBean会调用getObject。
4.模板模式。例如jdbcTemplate,简化数据库操作。
5.观察者模式。监听器。
6.代理模式。aop的动态代理。jdk动态代理和cglib动态代理。

3.AOP用在项目的哪些业务？
数据埋点。使用切面执行业务方法时pv+1。

4.AOP的实现方式？
1.静态代理。
1.1在编译期对Java字节码织入。
1.2 AspectJ。
1.3 代理类需要实现和目标对象一样的接口。
2.动态代理。
2.1 在程序运行期对业务方法进行增强，不会生成新类。
2.2JDK动态代理。反射技术。如果目标类实现类接口。
2.3 cglib动态代理。如果目标类未实现接口。引入asm.jar。


1.Spring的单例bean是否是线程安全的？（10）
1.1 维护了内部状态的bean，是非线程安全的。例如购物车的bean维护了商品列表属性，可以用ThreadLocal来解决。
1.2 无状态的bean是线程安全的，例如只有打印方法。








5.怎么写一个AOP切面？
1. 添加AOP依赖。
2. @Aspect创建切面类。
3.定义切点。
4.定义通知。@Around ...通知类型
5.实现通知逻辑。

6.Spring通知的类型
1.@Before，方法执行前。
2.@After，方法执行后。
3.@After-returing，方法执行成功后。
4.@After-throwing，方法执行报错。
5.@Around，方法调用之前和调用之后。只执行一次。



