一.描述一下redis的数据结构，各自的使用场景 ，各自的底层数据结构和原理
1.字符串类型
非法访问ip的计数器，使用的incr自增1，其操作是原子性的。记录ip后可以通过nginx的http deny配置来限制访问。
底层数据结构：动态字符串，初始容量和传入的字符串容量相等。小于1M的时候扩容会多分配一倍的空间，大于1M的时候每次扩容会多分配1M的空间。惰性空间释放的特性，字符串缩短不会立即释放多余的空间，而是等待后续使用。这样可以避免频繁分配和释放操作。
2.hash类型
适合存储属性经常更改的对象。
底层数据结构：压缩列表和哈希表。数据量少的时候用压缩列表，多的时候用哈希表（数组加链表）。满足元素512个和字符串长度64字节时，默认压缩列表。
3.list类型
简易的队列，管道模式取。压缩列表+双向链表。
4.set类型
共同关注。整数的集合和哈希表。
5.zset有序集合类型
跳表+哈希表。跳表维护元素的索引，哈希表维护score分数。
6.底层数据结构中的压缩列表的特点
通过一系列编码和压缩技术,将元素紧密地存储在连续的内存空间中。
1.内存紧凑。
2.可变长度。
3.连续存储。
4.双向遍历。
5.动态调整。

二、描述一下redis作为内存数据库和缓存服务器的区别
1.数据的持久性
Redids作为内存数据库，数据持久化是关键，需要将数据持久化到磁盘中，崩溃或者重启的时候从磁盘中加载数据。作为缓存服务器的话，可以从数据库中重新加载数据作为缓存。
2.数据一致性
Redis作为内存数据库，对数据一致性的要求高，数据的更新和删除要及时更新到磁盘。作为缓存服务器的话，可以接受缓存数据存在一定延时。
3.数据访问模式
Redis作为内存数据库的话，通常是读写的数据访问模式。作为缓存数据库的话，通常是只读的数据访问模式。
4.数据量和内存大小
Redis作为内存数据库的话，存储的数据量大，占用内存多。redis作为缓存数据库的话，只缓存频繁访问的数据，用LRU策略来自动删除最频繁访问的数据子集。
5.总结
Redis作为内存数据库，强调 数据的持久性，一致性，和读写的数据访问模式。缓存服务器则侧重提供高速的数据访问和减轻后端数据库的压力。


三、描述一下redis的持久化机制
1.RDB：RDB是默认的持久化机制，指定的时间间隔内备份内存中的数据集写入磁盘。
2.RDB文件是压缩过的二进制文件。
3.执行时机
 3.1 save和bgsave命令。
 3.2 flushall命令
 3.3 shutdown命令。
 3.4 主从复制从库全量备份同步的时候，主库会执行bgsave。
4.save和bgsave的区别
4.1 save会阻塞redis服务器进程，在创建rdb文件之前无法处理其他命令请求。
4.2 bgsave会fork子进程将数据集写进临时文件，写入成功后替换之前的rdb文件。

1.AOF：文件追加的形式。
2.AOF的策略：appendsync always/everysec/no
3.将aof_buf缓冲区的内容写入AOF文件，  始终，每秒，操作系统决定
4.AOF重写的流程
精简命令文件。
4.1 服务器fork子进程创建新的AOF文件。
4.2 写入命令追加到aof_buf缓冲区的同时，也加入到aof_rewrite_buf 重写缓冲区。
4.3 子进程完成重写后，给父进程一个信号，父进程把aof_rewrite_buf的内容写进AOF临时文件中，对AOF文件进行替换，保证AOF文件和当前数据库的一致性。

四、混合持久化aof-use-rdb-preamble
1.reids进程挂掉：aof日志文件
2.redis所在的机器挂掉：aof, redis-check-aof fix命令修复
3.没有aof，去加载rdb。
4.aof和rdb丢失或者损坏，给予最新的rdb副本进行恢复。

